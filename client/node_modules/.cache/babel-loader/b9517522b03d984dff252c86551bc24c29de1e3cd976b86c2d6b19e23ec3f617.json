{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useContext } from \"react\";\nimport { checkSet, updateDeck } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  deck: []\n  // setDeck: () => {},\n};\n\nconst GameContext = /*#__PURE__*/createContext(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  _s();\n  const contextValue = useContext(GameContext);\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\n_s(useGameDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const GameContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  // const [deck, setDeck] = useState<Card[]>(initDeck());\n  let deck = [];\n  const value = {\n    deck\n    // setDeck,\n  };\n\n  // useEffect(() => {\n  const selectedCards = deck.filter(card => card.selected === true);\n  if (selectedCards.length === 3) {\n    if (checkSet(selectedCards)) {\n      // let newDeck = [...deck];\n      // newDeck.forEach((card) => (card.set = true));\n      // setDeck(newDeck);\n\n      setTimeout(() => {\n        deck = updateDeck(deck);\n      }, 1000);\n    } else {\n      // There's not a set in the selected cards\n      // Set border to red and display for 1 sec\n      // Then remove border\n      /**\n       * Find the 3 selected cards in the deck and set a property that\n       * indicates that they are not a SET so then we can render the appropiate class\n       */\n      console.log(\"In Here!!\");\n      console.log(selectedCards);\n      // setDeck(markNotSetCards(deck));\n    }\n    // resetSelectedCards(deck);\n  }\n  // }, [deck]);\n\n  // const resetSelectedCards = (deck: Card[]) => {\n  //   setTimeout(() => {\n  //     let newDeck = [...deck];\n  //     newDeck.forEach((card) => {\n  //       card.selected = false;\n  //     });\n  //     setDeck(newDeck);\n  //   }, 1000);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["createContext","useContext","checkSet","updateDeck","jsxDEV","_jsxDEV","initialContext","deck","GameContext","useGameDetails","_s","contextValue","Error","GameContextProvider","_ref","children","value","selectedCards","filter","card","selected","length","setTimeout","console","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext } from \"react\";\nimport { checkSet, updateDeck } from \"../utils/utils\";\nimport { Card } from \"../types/Card\";\n\ninterface IGameContext {\n  deck: Card[];\n  // setDeck: (deck: Card[]) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  // setDeck: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  // const [deck, setDeck] = useState<Card[]>(initDeck());\n  let deck: Card[] = [];\n\n  const value = {\n    deck,\n    // setDeck,\n  };\n\n  // useEffect(() => {\n  const selectedCards = deck.filter((card) => card.selected === true);\n  if (selectedCards.length === 3) {\n    if (checkSet(selectedCards)) {\n      // let newDeck = [...deck];\n      // newDeck.forEach((card) => (card.set = true));\n      // setDeck(newDeck);\n\n      setTimeout(() => {\n        deck = updateDeck(deck);\n      }, 1000);\n    } else {\n      // There's not a set in the selected cards\n      // Set border to red and display for 1 sec\n      // Then remove border\n      /**\n       * Find the 3 selected cards in the deck and set a property that\n       * indicates that they are not a SET so then we can render the appropiate class\n       */\n      console.log(\"In Here!!\");\n      console.log(selectedCards);\n      // setDeck(markNotSetCards(deck));\n    }\n    // resetSelectedCards(deck);\n  }\n  // }, [deck]);\n\n  // const resetSelectedCards = (deck: Card[]) => {\n  //   setTimeout(() => {\n  //     let newDeck = [...deck];\n  //     newDeck.forEach((card) => {\n  //       card.selected = false;\n  //     });\n  //     setDeck(newDeck);\n  //   }, 1000);\n  // };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQtD,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE;EACN;AACF,CAAC;;AAED,MAAMC,WAAW,gBAAGR,aAAa,CAAeM,cAAc,CAAC;;AAE/D;AACA,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,YAAY,GAAGV,UAAU,CAACO,WAAW,CAAC;EAE5C,IAAI,CAACG,YAAY,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOD,YAAY;AACrB,CAAC;;AAED;AAAAD,EAAA,CATaD,cAAc;AAU3B,OAAO,MAAMI,mBAAmB,GAAGC,IAAA,IAAuB;EAAA,IAAtB;IAAEC;EAAc,CAAC,GAAAD,IAAA;EACnD;EACA,IAAIP,IAAY,GAAG,EAAE;EAErB,MAAMS,KAAK,GAAG;IACZT;IACA;EACF,CAAC;;EAED;EACA,MAAMU,aAAa,GAAGV,IAAI,CAACW,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,KAAK,IAAI,CAAC;EACnE,IAAIH,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;IAC9B,IAAInB,QAAQ,CAACe,aAAa,CAAC,EAAE;MAC3B;MACA;MACA;;MAEAK,UAAU,CAAC,MAAM;QACff,IAAI,GAAGJ,UAAU,CAACI,IAAI,CAAC;MACzB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACL;MACA;MACA;MACA;AACN;AACA;AACA;MACMgB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBD,OAAO,CAACC,GAAG,CAACP,aAAa,CAAC;MAC1B;IACF;IACA;EACF;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOZ,OAAA,CAACG,WAAW,CAACiB,QAAQ;IAACT,KAAK,EAAEA,KAAM;IAAAD,QAAA,EAAEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACC,EAAA,GA/CWjB,mBAAmB;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}