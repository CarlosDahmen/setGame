{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect, useCallback } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {}\n};\nconst GameContext = /*#__PURE__*/createContext(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  _s();\n  const contextValue = useContext(GameContext);\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\n_s(useGameDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const GameContextProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  // ------- State -------\n  const [deck, setDeck] = useState(initDeck());\n  const [score, setScore] = useState(0);\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = selectedCards => {\n    selectedCards.forEach(card => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      setDeck(updateDeck(deck));\n    }, 1000);\n  };\n  const selectedCardsNotASet = useCallback(selectedCards => {\n    let newDeck = [...deck];\n    selectedCards.forEach(card => {\n      card.set = false;\n    });\n    setDeck(newDeck);\n  }, [deck]);\n  const resetSelectedCards = useCallback(() =>\n  // Reset selected cards and update score\n  setTimeout(() => {\n    let newDeck = [...deck];\n    newDeck.forEach(card => {\n      card.selected = false;\n      card.set = null;\n    });\n    setScore(score - 1);\n    setDeck(newDeck);\n  }, 1000), [deck, score]);\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter(card => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Tell cards that they are a set\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Tell cards that they are not a set\n        selectedCardsNotASet(selectedCards);\n\n        // Reset selected cards\n        resetSelectedCards();\n      }\n    }\n  }, [deck, resetSelectedCards, selectedCardsAreASet, selectedCardsNotASet]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameContextProvider, \"Jbb6dsqvSe5g/mTN9CLqW7v/Z/o=\");\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","useCallback","initDeck","checkSet","updateDeck","jsxDEV","_jsxDEV","initialContext","deck","setDeck","score","setScore","GameContext","useGameDetails","_s","contextValue","Error","GameContextProvider","_ref","_s2","children","value","selectedCardsAreASet","selectedCards","forEach","card","set","setTimeout","selectedCardsNotASet","newDeck","resetSelectedCards","selected","filter","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { CardType } from \"../types/CardType\";\n\ninterface IGameContext {\n  deck: CardType[];\n  setDeck: (deck: CardType[]) => void;\n  score: number;\n  setScore: (score: number) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  // ------- State -------\n  const [deck, setDeck] = useState<CardType[]>(initDeck());\n  const [score, setScore] = useState<number>(0);\n\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore,\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = (selectedCards: CardType[]) => {\n    selectedCards.forEach((card) => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      setDeck(updateDeck(deck));\n    }, 1000);\n  };\n\n  const selectedCardsNotASet = useCallback(\n    (selectedCards: CardType[]) => {\n      let newDeck = [...deck];\n\n      selectedCards.forEach((card) => {\n        card.set = false;\n      });\n      setDeck(newDeck);\n    },\n    [deck]\n  );\n\n  const resetSelectedCards = useCallback(\n    () =>\n      // Reset selected cards and update score\n      setTimeout(() => {\n        let newDeck = [...deck];\n        newDeck.forEach((card) => {\n          card.selected = false;\n          card.set = null;\n        });\n\n        setScore(score - 1);\n        setDeck(newDeck);\n      }, 1000),\n    [deck, score]\n  );\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Tell cards that they are a set\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Tell cards that they are not a set\n        selectedCardsNotASet(selectedCards);\n\n        // Reset selected cards\n        resetSelectedCards();\n      }\n    }\n  }, [deck, resetSelectedCards, selectedCardsAreASet, selectedCardsNotASet]);\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}