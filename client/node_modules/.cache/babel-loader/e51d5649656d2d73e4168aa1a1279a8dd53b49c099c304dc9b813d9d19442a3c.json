{"ast":null,"code":"const randNum = () => Math.ceil(81 * Math.random());\nexport const initDeck = () => {\n  let newDeck = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck;\n};\nexport let deck = initDeck();\nexport const newCard = existingDeck => {\n  let newCard = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\nexport const checkSet = selectedCards => {\n  console.log(\"CHECKED!\");\n  return true;\n};\nexport const updateDeck = (deck, selectedCards) => {\n  console.log(\"deck before\", deck, \"selectedcards\", selectedCards);\n  selectedCards.forEach(card => {\n    const idx = deck.indexOf(card);\n    let newCard = undefined;\n    while (!newCard) {\n      let newNumber = randNum();\n      if (!deck.includes(newNumber)) {\n        deck[idx] = newNumber;\n      }\n    }\n  });\n  console.log(\"deck after\", deck);\n  return deck;\n};","map":{"version":3,"names":["randNum","Math","ceil","random","initDeck","newDeck","length","newNum","includes","push","deck","newCard","existingDeck","checkSet","selectedCards","console","log","updateDeck","forEach","card","idx","indexOf","undefined","newNumber"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/Deck.ts"],"sourcesContent":["const randNum = () => Math.ceil(81 * Math.random());\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck;\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: number[]) => {\n  console.log(\"CHECKED!\");\n  return true;\n};\n\nexport const updateDeck = (deck: number[], selectedCards: number[]) => {\n  console.log(\"deck before\", deck, \"selectedcards\", selectedCards);\n  selectedCards.forEach((card) => {\n    const idx = deck.indexOf(card);\n\n    let newCard = undefined;\n    while (!newCard) {\n      let newNumber = randNum();\n      if (!deck.includes(newNumber)) {\n        deck[idx] = newNumber;\n      }\n    }\n  });\n  console.log(\"deck after\", deck);\n\n  return deck;\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAMC,IAAI,CAACC,IAAI,CAAC,EAAE,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;AAEnD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,IAAIC,OAAiB,GAAG,EAAE;EAC1B,OAAOA,OAAO,CAACC,MAAM,GAAG,EAAE,EAAE;IAC1B,MAAMC,MAAM,GAAGP,OAAO,CAAC,CAAC;IACxB,IAAI,CAACK,OAAO,CAACG,QAAQ,CAACD,MAAM,CAAC,EAAE;MAC7BF,OAAO,CAACI,IAAI,CAACF,MAAM,CAAC;IACtB;EACF;EACA,OAAOF,OAAO;AAChB,CAAC;AAED,OAAO,IAAIK,IAAI,GAAGN,QAAQ,CAAC,CAAC;AAE5B,OAAO,MAAMO,OAAO,GAAIC,YAAsB,IAAK;EACjD,IAAID,OAAe,GAAG,CAAC;EACvB,OAAOA,OAAO,KAAK,CAAC,EAAE;IACpB,MAAMJ,MAAM,GAAGP,OAAO,CAAC,CAAC;IACxB,IAAI,CAACY,YAAY,CAACJ,QAAQ,CAACD,MAAM,CAAC,EAAE;MAClCI,OAAO,GAAGJ,MAAM;IAClB;EACF;EACA,OAAOI,OAAO;AAChB,CAAC;AAED,OAAO,MAAME,QAAQ,GAAIC,aAAuB,IAAK;EACnDC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAACP,IAAc,EAAEI,aAAuB,KAAK;EACrEC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEN,IAAI,EAAE,eAAe,EAAEI,aAAa,CAAC;EAChEA,aAAa,CAACI,OAAO,CAAEC,IAAI,IAAK;IAC9B,MAAMC,GAAG,GAAGV,IAAI,CAACW,OAAO,CAACF,IAAI,CAAC;IAE9B,IAAIR,OAAO,GAAGW,SAAS;IACvB,OAAO,CAACX,OAAO,EAAE;MACf,IAAIY,SAAS,GAAGvB,OAAO,CAAC,CAAC;MACzB,IAAI,CAACU,IAAI,CAACF,QAAQ,CAACe,SAAS,CAAC,EAAE;QAC7Bb,IAAI,CAACU,GAAG,CAAC,GAAGG,SAAS;MACvB;IACF;EACF,CAAC,CAAC;EACFR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,IAAI,CAAC;EAE/B,OAAOA,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}