{"ast":null,"code":"import { cards } from \"../cards\";\nimport findIndex from \"lodash.findindex\";\nconst randNum = () => Math.ceil(15 * Math.random());\n\n// const randCard = () => {\n//   const randIdx = randNum();\n//   return cards[randIdx];\n// };\n\nexport const initDeck = () => {\n  let newDeck = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map(number => {\n    console.log(number);\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\nconst isCardInDeck = (deck, card) => {\n  return findIndex(deck, {\n    id: card.id\n  }) === -1 ? false : true;\n};\nexport let deck = initDeck();\nexport const newCard = existingDeck => {\n  let newCard = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\nexport const checkSet = selectedCards => {\n  console.log(\"'Checking Set', returning true\");\n\n  // const isItASet = Math.random() < 0.5 ? true : false;\n  // console.log(\"Is it a Set?\", isItASet);\n  // return isItASet;\n  return true;\n};\nexport const notASet = selectedCards => {};\n\n/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = deck => {\n  const selectedCards = deck.filter(card => card.selected === true);\n  let newDeck = [...deck];\n  selectedCards.forEach(card => {\n    const selectedCardIdx = findIndex(deck, {\n      id: card.id\n    });\n    let newCard = undefined;\n    while (newCard === undefined) {\n      let newIdx = randNum();\n      if (findIndex(newDeck, {\n        id: newIdx\n      }) === -1) {\n        newCard = cards[newIdx - 1];\n        console.log(deck, newCard);\n        newDeck[selectedCardIdx] = newCard;\n      }\n    }\n  });\n  deck.forEach(card => card.selected = false);\n  return newDeck;\n};","map":{"version":3,"names":["cards","findIndex","randNum","Math","ceil","random","initDeck","newDeck","length","newNum","includes","push","map","number","console","log","newCard","isCardInDeck","deck","card","id","existingDeck","checkSet","selectedCards","notASet","updateDeck","filter","selected","forEach","selectedCardIdx","undefined","newIdx"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/utils.ts"],"sourcesContent":["import { cards } from \"../cards\";\nimport { Card } from \"../types/Card\";\nimport findIndex from \"lodash.findindex\";\n\nconst randNum = () => Math.ceil(15 * Math.random());\n\n// const randCard = () => {\n//   const randIdx = randNum();\n//   return cards[randIdx];\n// };\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map((number) => {\n    console.log(number);\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\n\nconst isCardInDeck = (deck: Card[], card: Card) => {\n  return findIndex(deck, { id: card.id }) === -1 ? false : true;\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: Card[]) => {\n  console.log(\"'Checking Set', returning true\");\n\n  // const isItASet = Math.random() < 0.5 ? true : false;\n  // console.log(\"Is it a Set?\", isItASet);\n  // return isItASet;\n  return true;\n};\n\nexport const notASet = (selectedCards: Card[]) => {};\n\n/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck: Card[]) => {\n  const selectedCards = deck.filter((card) => card.selected === true);\n  let newDeck = [...deck];\n  selectedCards.forEach((card) => {\n    const selectedCardIdx: number = findIndex(deck, { id: card.id });\n\n    let newCard = undefined;\n\n    while (newCard === undefined) {\n      let newIdx = randNum();\n\n      if (findIndex(newDeck, { id: newIdx }) === -1) {\n        newCard = cards[newIdx - 1];\n        console.log(deck, newCard);\n        newDeck[selectedCardIdx] = newCard;\n      }\n    }\n  });\n  deck.forEach((card) => (card.selected = false));\n  return newDeck;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}