{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/components/Gameboard.tsx\",\n  _s = $RefreshSig$();\nimport { useGameDetails } from \"../context/GameLogic\";\nimport styles from \"./Gameboard.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  const {\n    deck,\n    selectedCards,\n    setSelectedCards\n  } = useGameDetails();\n  console.log(selectedCards);\n  const selectCard = card => {\n    const selectedCardId = card.id;\n    const selectedCardsIncludesCard = selectedCards.some(card => card.id === selectedCardId);\n    console.log(\"check\", selectedCardsIncludesCard);\n    if (selectedCards.length < 3 && !selectedCardsIncludesCard) {\n      const newSelectedCards = [...selectedCards, card];\n      setSelectedCards(newSelectedCards);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.gameboard,\n    children: deck.length && deck.map((card, idx) => {\n      const imageUrl = require(`../../public/images/cards/${card.id}.gif`);\n      const isCardSelected = selectedCards.some(currcard => currcard.id === card.id);\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `${styles.card} ${isCardSelected ? styles.selectedCard : \"\"}`,\n        src: imageUrl,\n        width: 258,\n        height: 167,\n        alt: \"card\",\n        onClick: () => selectCard(card)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(Gameboard, \"Ty45Bj1j/2I+9jsp+9VvWO9VW5o=\", false, function () {\n  return [useGameDetails];\n});\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["useGameDetails","styles","jsxDEV","_jsxDEV","Gameboard","_s","deck","selectedCards","setSelectedCards","console","log","selectCard","card","selectedCardId","id","selectedCardsIncludesCard","some","length","newSelectedCards","className","gameboard","children","map","idx","imageUrl","require","isCardSelected","currcard","selectedCard","src","width","height","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/components/Gameboard.tsx"],"sourcesContent":["import { useGameDetails } from \"../context/GameLogic\";\nimport { Card } from \"../types/Card\";\nimport styles from \"./Gameboard.module.css\";\n\nexport default function Gameboard() {\n  const { deck, selectedCards, setSelectedCards } = useGameDetails();\n\n  console.log(selectedCards);\n\n  const selectCard = (card: Card) => {\n    const selectedCardId = card.id;\n    const selectedCardsIncludesCard = selectedCards.some(\n      (card) => card.id === selectedCardId\n    );\n\n    console.log(\"check\", selectedCardsIncludesCard);\n\n    if (selectedCards.length < 3 && !selectedCardsIncludesCard) {\n      const newSelectedCards = [...selectedCards, card];\n      setSelectedCards(newSelectedCards);\n    }\n  };\n\n  return (\n    <div className={styles.gameboard}>\n      {deck.length &&\n        deck.map((card, idx) => {\n          const imageUrl = require(`../../public/images/cards/${card.id}.gif`);\n          const isCardSelected = selectedCards.some(\n            (currcard) => currcard.id === card.id\n          );\n          return (\n            <img\n              className={`${styles.card} ${\n                isCardSelected ? styles.selectedCard : \"\"\n              }`}\n              src={imageUrl}\n              width={258}\n              height={167}\n              alt=\"card\"\n              key={idx}\n              onClick={() => selectCard(card)}\n            />\n          );\n        })}\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,cAAc,QAAQ,sBAAsB;AAErD,OAAOC,MAAM,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM;IAAEC,IAAI;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGR,cAAc,CAAC,CAAC;EAElES,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;EAE1B,MAAMI,UAAU,GAAIC,IAAU,IAAK;IACjC,MAAMC,cAAc,GAAGD,IAAI,CAACE,EAAE;IAC9B,MAAMC,yBAAyB,GAAGR,aAAa,CAACS,IAAI,CACjDJ,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKD,cACxB,CAAC;IAEDJ,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEK,yBAAyB,CAAC;IAE/C,IAAIR,aAAa,CAACU,MAAM,GAAG,CAAC,IAAI,CAACF,yBAAyB,EAAE;MAC1D,MAAMG,gBAAgB,GAAG,CAAC,GAAGX,aAAa,EAAEK,IAAI,CAAC;MACjDJ,gBAAgB,CAACU,gBAAgB,CAAC;IACpC;EACF,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAElB,MAAM,CAACmB,SAAU;IAAAC,QAAA,EAC9Bf,IAAI,CAACW,MAAM,IACVX,IAAI,CAACgB,GAAG,CAAC,CAACV,IAAI,EAAEW,GAAG,KAAK;MACtB,MAAMC,QAAQ,GAAGC,OAAO,CAAE,6BAA4Bb,IAAI,CAACE,EAAG,MAAK,CAAC;MACpE,MAAMY,cAAc,GAAGnB,aAAa,CAACS,IAAI,CACtCW,QAAQ,IAAKA,QAAQ,CAACb,EAAE,KAAKF,IAAI,CAACE,EACrC,CAAC;MACD,oBACEX,OAAA;QACEgB,SAAS,EAAG,GAAElB,MAAM,CAACW,IAAK,IACxBc,cAAc,GAAGzB,MAAM,CAAC2B,YAAY,GAAG,EACxC,EAAE;QACHC,GAAG,EAAEL,QAAS;QACdM,KAAK,EAAE,GAAI;QACXC,MAAM,EAAE,GAAI;QACZC,GAAG,EAAC,MAAM;QAEVC,OAAO,EAAEA,CAAA,KAAMtB,UAAU,CAACC,IAAI;MAAE,GAD3BW,GAAG;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAAChC,EAAA,CA3CuBD,SAAS;EAAA,QACmBJ,cAAc;AAAA;AAAAsC,EAAA,GAD1ClC,SAAS;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}