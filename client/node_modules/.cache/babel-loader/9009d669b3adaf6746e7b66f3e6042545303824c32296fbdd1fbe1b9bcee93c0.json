{"ast":null,"code":"import { cards } from \"../cards\";\nconst randNum = () => Math.ceil(12 * Math.random());\nconst randCard = () => {\n  const randIdx = randNum();\n  return cards[randIdx];\n};\nexport const initDeck = () => {\n  let newDeck = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map(number => {\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\nexport let deck = initDeck();\nexport const newCard = existingDeck => {\n  let newCard = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\nexport const checkSet = selectedCards => {\n  /* hash = {\n    1 => [one, red, peanut, solid]\n    2 => [two, red, peanut, solid]\n    3 => [three, red, peanut, solid]\n  }\n     hash.get(card)\n   */\n  console.log(\"CHECKED!\");\n  return true;\n};\n\n/**\n *\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck, selectedCards) => {\n  // selectedCards.forEach((selectedCard) => {\n  //   const selectedCardId = selectedCard.id;\n\n  //   const idxInDeck = deck.filter((card, idx) => {\n  //     if (card.id === selectedCardId) {\n  //       return idx;\n  //     }\n  //   })[0]?.id;\n\n  //   console.log(selectedCardId, idxInDeck);\n\n  //   let newCard = undefined;\n\n  //   while (newCard === undefined) {\n  //     let newIdx = randNum();\n\n  //     if (!deck.some((deckCard) => deckCard.id === newIdx)) {\n  //       newCard = cards[newIdx - 1];\n  //       deck[idxInDeck] = newCard;\n  //     }\n  //   }\n  // });\n  return deck;\n};","map":{"version":3,"names":["cards","randNum","Math","ceil","random","randCard","randIdx","initDeck","newDeck","length","newNum","includes","push","map","number","newCard","deck","existingDeck","checkSet","selectedCards","console","log","updateDeck"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/Deck.ts"],"sourcesContent":["import { cards } from \"../cards\";\nimport { Card } from \"../types/Card\";\n\nconst randNum = () => Math.ceil(12 * Math.random());\n\nconst randCard = () => {\n  const randIdx = randNum();\n  return cards[randIdx];\n};\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map((number) => {\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: Card[]) => {\n  /* hash = {\n    1 => [one, red, peanut, solid]\n    2 => [two, red, peanut, solid]\n    3 => [three, red, peanut, solid]\n  }\n\n    hash.get(card)\n\n  */\n  console.log(\"CHECKED!\");\n  return true;\n};\n\n/**\n *\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck: Card[], selectedCards: Card[]) => {\n  // selectedCards.forEach((selectedCard) => {\n  //   const selectedCardId = selectedCard.id;\n\n  //   const idxInDeck = deck.filter((card, idx) => {\n  //     if (card.id === selectedCardId) {\n  //       return idx;\n  //     }\n  //   })[0]?.id;\n\n  //   console.log(selectedCardId, idxInDeck);\n\n  //   let newCard = undefined;\n\n  //   while (newCard === undefined) {\n  //     let newIdx = randNum();\n\n  //     if (!deck.some((deckCard) => deckCard.id === newIdx)) {\n  //       newCard = cards[newIdx - 1];\n  //       deck[idxInDeck] = newCard;\n  //     }\n  //   }\n  // });\n  return deck;\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAGhC,MAAMC,OAAO,GAAGA,CAAA,KAAMC,IAAI,CAACC,IAAI,CAAC,EAAE,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAMC,OAAO,GAAGL,OAAO,CAAC,CAAC;EACzB,OAAOD,KAAK,CAACM,OAAO,CAAC;AACvB,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,IAAIC,OAAiB,GAAG,EAAE;EAE1B,OAAOA,OAAO,CAACC,MAAM,GAAG,EAAE,EAAE;IAC1B,MAAMC,MAAM,GAAGT,OAAO,CAAC,CAAC;IAExB,IAAI,CAACO,OAAO,CAACG,QAAQ,CAACD,MAAM,CAAC,EAAE;MAC7BF,OAAO,CAACI,IAAI,CAACF,MAAM,CAAC;IACtB;EACF;EACA,OAAOF,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAK;IAC7B,MAAMC,OAAO,GAAGf,KAAK,CAACc,MAAM,GAAG,CAAC,CAAC;IACjC,OAAOC,OAAO;EAChB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,IAAIC,IAAI,GAAGT,QAAQ,CAAC,CAAC;AAE5B,OAAO,MAAMQ,OAAO,GAAIE,YAAsB,IAAK;EACjD,IAAIF,OAAe,GAAG,CAAC;EAEvB,OAAOA,OAAO,KAAK,CAAC,EAAE;IACpB,MAAML,MAAM,GAAGT,OAAO,CAAC,CAAC;IACxB,IAAI,CAACgB,YAAY,CAACN,QAAQ,CAACD,MAAM,CAAC,EAAE;MAClCK,OAAO,GAAGL,MAAM;IAClB;EACF;EACA,OAAOK,OAAO;AAChB,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAIC,aAAqB,IAAK;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;EAGEC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACN,IAAY,EAAEG,aAAqB,KAAK;EACjE;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOH,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}