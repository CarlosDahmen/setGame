{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/client/src/context/GameLogic.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport useHighscores from \"../hooks/useHighscores\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {}\n};\nlet hasCountdownEnded = false;\nconst GameContext = /*#__PURE__*/createContext(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = (countdownEnded, name) => {\n  _s();\n  console.log(\"COUNTODN ENDED countdownEnded\", countdownEnded);\n  if (countdownEnded) {\n    hasCountdownEnded = true;\n  }\n  const contextValue = useContext(GameContext);\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\n_s(useGameDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const GameContextProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const {\n    isHighscore\n  } = useHighscores();\n  // ------- State -------\n  const [deck, setDeck] = useState(initDeck());\n  const [score, setScore] = useState(0);\n  console.log(\"score inside Gamelogic\", score);\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = selectedCards => {\n    selectedCards.forEach(card => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      const newDeck = updateDeck(deck);\n      setDeck(newDeck);\n    }, 1000);\n  };\n  const selectedCardsNotASet = selectedCards => {\n    setScore(score - 1);\n    selectedCards.forEach(card => {\n      card.set = false;\n    });\n    // Reset selected cards\n    setTimeout(() => {\n      let newDeck = [...deck];\n      deck.forEach(card => {\n        card.selected = false;\n        card.set = null;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter(card => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Modify selectedCards property set to true\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Modify selectedCards property set to false\n        selectedCardsNotASet(selectedCards);\n      }\n    }\n  }, [deck]);\n\n  //if current score is higer than the lowest high score, add it to the high scores\n  useEffect(() => {\n    if (hasCountdownEnded) {\n      isHighscore({\n        name,\n        score\n      });\n    }\n    // countdownEnded &&\n  }, [score]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameContextProvider, \"eQ7Bh/yQzx48ukajjFt1/o7Jwiw=\", false, function () {\n  return [useHighscores];\n});\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","initDeck","checkSet","updateDeck","useHighscores","jsxDEV","_jsxDEV","initialContext","deck","setDeck","score","setScore","hasCountdownEnded","GameContext","useGameDetails","countdownEnded","name","_s","console","log","contextValue","Error","GameContextProvider","_ref","_s2","children","isHighscore","value","selectedCardsAreASet","selectedCards","forEach","card","set","setTimeout","newDeck","selectedCardsNotASet","selected","filter","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/client/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { CardType } from \"../types/CardType\";\nimport useHighscores from \"../hooks/useHighscores\";\ninterface IGameContext {\n  deck: CardType[];\n  setDeck: (deck: CardType[]) => void;\n  score: number;\n  setScore: (score: number) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n};\n\nlet hasCountdownEnded = false;\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = (countdownEnded?: boolean, name?: string) => {\n  console.log(\"COUNTODN ENDED countdownEnded\", countdownEnded);\n\n  if (countdownEnded) {\n    hasCountdownEnded = true;\n  }\n\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  const { isHighscore } = useHighscores();\n  // ------- State -------\n  const [deck, setDeck] = useState<CardType[]>(initDeck());\n  const [score, setScore] = useState<number>(0);\n\n  console.log(\"score inside Gamelogic\", score);\n\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore,\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = (selectedCards: CardType[]) => {\n    selectedCards.forEach((card) => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      const newDeck = updateDeck(deck);\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  const selectedCardsNotASet = (selectedCards: CardType[]) => {\n    setScore(score - 1);\n\n    selectedCards.forEach((card) => {\n      card.set = false;\n    });\n    // Reset selected cards\n    setTimeout(() => {\n      let newDeck = [...deck];\n      deck.forEach((card) => {\n        card.selected = false;\n        card.set = null;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Modify selectedCards property set to true\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Modify selectedCards property set to false\n        selectedCardsNotASet(selectedCards);\n      }\n    }\n  }, [deck]);\n\n  //if current score is higer than the lowest high score, add it to the high scores\n  useEffect(() => {\n    if (hasCountdownEnded) {\n      isHighscore({ name, score });\n    }\n    // countdownEnded &&\n  }, [score]);\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}