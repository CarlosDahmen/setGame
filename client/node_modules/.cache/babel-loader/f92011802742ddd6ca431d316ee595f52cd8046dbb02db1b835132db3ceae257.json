{"ast":null,"code":"import { cards } from \"../cards\";\nimport findIndex from \"lodash.findindex\";\nimport isEqual from \"lodash.isequal\";\nconst randNum = () => Math.ceil(81 * Math.random());\nexport const initDeck = () => {\n  let newDeck = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map(number => {\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\nconst isCardInDeck = (deck, cardId) => {\n  return findIndex(deck, {\n    id: cardId\n  }) === -1 ? false : true;\n};\nexport let deck = initDeck();\nexport const newCard = existingDeck => {\n  let newCard = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\nexport const checkSet = selectedCards => {\n  let card1 = selectedCards[0];\n  let card2 = selectedCards[1];\n  let card3 = selectedCards[2];\n  if (\n  // ((isEqual(card1.color, card2.color) && isEqual(card1.color, card3.color)) ||\n  //   (!isEqual(card1.color, card2.color) &&\n  //     !isEqual(card2.color, card3.color) &&\n  //     !isEqual(card1.color, card3.color))) &&\n  // ((isEqual(card1.shape, card2.shape) && isEqual(card1.shape, card3.shape)) ||\n  //   (!isEqual(card1.shape, card2.shape) &&\n  //     !isEqual(card2.shape, card3.shape) &&\n  //     !isEqual(card1.shape, card3.shape))) &&\n  // ((isEqual(card1.fill, card2.fill) && isEqual(card1.fill, card3.fill)) ||\n  //   (!isEqual(card1.fill, card2.fill) &&\n  //     !isEqual(card2.fill, card3.fill) &&\n  //     !isEqual(card1.fill, card3.fill))) &&\n  isEqual(card1.quantity, card2.quantity) && isEqual(card2.quantity, card3.quantity) || !isEqual(card1.quantity, card2.quantity) && !isEqual(card2.quantity, card3.quantity) && !isEqual(card1.quantity, card3.quantity)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = deck => {\n  const selectedCards = deck.filter(card => card.selected === true);\n  let newCardIds = [];\n  let newDeck = [...deck];\n  selectedCards.forEach(card => {\n    const selectedCardIdx = findIndex(newDeck, {\n      id: card.id\n    });\n    let newCard = undefined;\n    while (newCard === undefined) {\n      let newIdx = randNum();\n      if (!isCardInDeck(deck, newIdx) && !newCardIds.includes(newIdx)) {\n        newCardIds.push(newIdx);\n        newCard = cards[newIdx - 1];\n        newDeck[selectedCardIdx] = newCard;\n      }\n    }\n  });\n  deck.forEach(card => card.selected = false);\n  return newDeck;\n};","map":{"version":3,"names":["cards","findIndex","isEqual","randNum","Math","ceil","random","initDeck","newDeck","length","newNum","includes","push","map","number","newCard","isCardInDeck","deck","cardId","id","existingDeck","checkSet","selectedCards","card1","card2","card3","quantity","updateDeck","filter","card","selected","newCardIds","forEach","selectedCardIdx","undefined","newIdx"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/utils.ts"],"sourcesContent":["import { cards } from \"../cards\";\nimport { Card } from \"../types/Card\";\nimport findIndex from \"lodash.findindex\";\nimport isEqual from \"lodash.isequal\";\n\nconst randNum = () => Math.ceil(81 * Math.random());\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map((number) => {\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\n\nconst isCardInDeck = (deck: Card[], cardId: number) => {\n  return findIndex(deck, { id: cardId }) === -1 ? false : true;\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: Card[]) => {\n  let card1 = selectedCards[0];\n  let card2 = selectedCards[1];\n  let card3 = selectedCards[2];\n\n  if (\n    // ((isEqual(card1.color, card2.color) && isEqual(card1.color, card3.color)) ||\n    //   (!isEqual(card1.color, card2.color) &&\n    //     !isEqual(card2.color, card3.color) &&\n    //     !isEqual(card1.color, card3.color))) &&\n    // ((isEqual(card1.shape, card2.shape) && isEqual(card1.shape, card3.shape)) ||\n    //   (!isEqual(card1.shape, card2.shape) &&\n    //     !isEqual(card2.shape, card3.shape) &&\n    //     !isEqual(card1.shape, card3.shape))) &&\n    // ((isEqual(card1.fill, card2.fill) && isEqual(card1.fill, card3.fill)) ||\n    //   (!isEqual(card1.fill, card2.fill) &&\n    //     !isEqual(card2.fill, card3.fill) &&\n    //     !isEqual(card1.fill, card3.fill))) &&\n    (isEqual(card1.quantity, card2.quantity) &&\n      isEqual(card2.quantity, card3.quantity)) ||\n    (!isEqual(card1.quantity, card2.quantity) &&\n      !isEqual(card2.quantity, card3.quantity) &&\n      !isEqual(card1.quantity, card3.quantity))\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck: Card[]) => {\n  const selectedCards = deck.filter((card) => card.selected === true);\n\n  let newCardIds: number[] = [];\n  let newDeck = [...deck];\n  selectedCards.forEach((card) => {\n    const selectedCardIdx: number = findIndex(newDeck, { id: card.id });\n\n    let newCard = undefined;\n\n    while (newCard === undefined) {\n      let newIdx = randNum();\n\n      if (!isCardInDeck(deck, newIdx) && !newCardIds.includes(newIdx)) {\n        newCardIds.push(newIdx);\n        newCard = cards[newIdx - 1];\n        newDeck[selectedCardIdx] = newCard;\n      }\n    }\n  });\n  deck.forEach((card) => (card.selected = false));\n  return newDeck;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}