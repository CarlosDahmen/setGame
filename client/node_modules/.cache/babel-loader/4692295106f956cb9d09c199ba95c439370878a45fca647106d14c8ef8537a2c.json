{"ast":null,"code":"import _toConsumableArray from\"/Users/cd/Documents/Projects/set-game2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{cards}from\"../cards\";import findIndex from\"lodash.findindex\";import isEqual from\"lodash.isequal\";var randNum=function randNum(){return Math.ceil(81*Math.random());};export var initDeck=function initDeck(){var newDeck=[];while(newDeck.length<12){var newNum=randNum();if(!newDeck.includes(newNum)){newDeck.push(newNum);}}return newDeck.map(function(number){var newCard=cards[number-1];return newCard;});};var isCardInDeck=function isCardInDeck(deck,cardId){return findIndex(deck,{id:cardId})===-1?false:true;};export var deck=initDeck();export var newCard=function newCard(existingDeck){var newCard=0;while(newCard!==0){var newNum=randNum();if(!existingDeck.includes(newNum)){newCard=newNum;}}return newCard;};export var checkSet=function checkSet(selectedCards){var card1=selectedCards[0];var card2=selectedCards[1];var card3=selectedCards[2];if(//all colors are the same\n(isEqual(card1.color,card2.color)&&isEqual(card1.color,card3.color)||//or all colors are different\n!isEqual(card1.color,card2.color)&&!isEqual(card2.color,card3.color)&&!isEqual(card1.color,card3.color))&&(//all shapes are the same\nisEqual(card1.shape,card2.shape)&&isEqual(card1.shape,card3.shape)||//or all shapes are different\n!isEqual(card1.shape,card2.shape)&&!isEqual(card2.shape,card3.shape)&&!isEqual(card1.shape,card3.shape))&&(//all fills are the same\nisEqual(card1.fill,card2.fill)&&isEqual(card1.fill,card3.fill)||//or all fills are different\n!isEqual(card1.fill,card2.fill)&&!isEqual(card2.fill,card3.fill)&&!isEqual(card1.fill,card3.fill))&&(//all quantities are the same\nisEqual(card1.quantity,card2.quantity)&&isEqual(card2.quantity,card3.quantity)||//or all quantities are different\n!isEqual(card1.quantity,card2.quantity)&&!isEqual(card2.quantity,card3.quantity)&&!isEqual(card1.quantity,card3.quantity))){return true;}else{return false;}};/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */export var updateDeck=function updateDeck(deck){var selectedCards=deck.filter(function(card){return card.selected===true;});var newCardIds=[];var newDeck=_toConsumableArray(deck);selectedCards.forEach(function(card){var selectedCardIdx=findIndex(newDeck,{id:card.id});var newCard=undefined;while(newCard===undefined){var newIdx=randNum();if(!isCardInDeck(deck,newIdx)&&!newCardIds.includes(newIdx)){newCardIds.push(newIdx);newCard=cards[newIdx-1];newDeck[selectedCardIdx]=newCard;}}});deck.forEach(function(card){card.selected=false;card.set=null;});return newDeck;};","map":{"version":3,"names":["cards","findIndex","isEqual","randNum","Math","ceil","random","initDeck","newDeck","length","newNum","includes","push","map","number","newCard","isCardInDeck","deck","cardId","id","existingDeck","checkSet","selectedCards","card1","card2","card3","color","shape","fill","quantity","updateDeck","filter","card","selected","newCardIds","_toConsumableArray","forEach","selectedCardIdx","undefined","newIdx","set"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/utils.ts"],"sourcesContent":["import { cards } from \"../cards\";\nimport { CardType } from \"../types/CardType\";\nimport findIndex from \"lodash.findindex\";\nimport isEqual from \"lodash.isequal\";\n\nconst randNum = () => Math.ceil(81 * Math.random());\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map((number) => {\n    const newCard = cards[number - 1];\n    return newCard;\n  });\n};\n\nconst isCardInDeck = (deck: CardType[], cardId: number) => {\n  return findIndex(deck, { id: cardId }) === -1 ? false : true;\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: CardType[]) => {\n  let card1 = selectedCards[0];\n  let card2 = selectedCards[1];\n  let card3 = selectedCards[2];\n\n  if (\n    //all colors are the same\n    ((isEqual(card1.color, card2.color) && isEqual(card1.color, card3.color)) ||\n      //or all colors are different\n      (!isEqual(card1.color, card2.color) &&\n        !isEqual(card2.color, card3.color) &&\n        !isEqual(card1.color, card3.color))) &&\n    //all shapes are the same\n    ((isEqual(card1.shape, card2.shape) && isEqual(card1.shape, card3.shape)) ||\n      //or all shapes are different\n      (!isEqual(card1.shape, card2.shape) &&\n        !isEqual(card2.shape, card3.shape) &&\n        !isEqual(card1.shape, card3.shape))) &&\n    //all fills are the same\n    ((isEqual(card1.fill, card2.fill) && isEqual(card1.fill, card3.fill)) ||\n      //or all fills are different\n      (!isEqual(card1.fill, card2.fill) &&\n        !isEqual(card2.fill, card3.fill) &&\n        !isEqual(card1.fill, card3.fill))) &&\n    //all quantities are the same\n    ((isEqual(card1.quantity, card2.quantity) &&\n      isEqual(card2.quantity, card3.quantity)) ||\n      //or all quantities are different\n      (!isEqual(card1.quantity, card2.quantity) &&\n        !isEqual(card2.quantity, card3.quantity) &&\n        !isEqual(card1.quantity, card3.quantity)))\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck: CardType[]) => {\n  const selectedCards = deck.filter((card) => card.selected === true);\n\n  let newCardIds: number[] = [];\n  let newDeck = [...deck];\n  selectedCards.forEach((card) => {\n    const selectedCardIdx: number = findIndex(newDeck, { id: card.id });\n\n    let newCard = undefined;\n\n    while (newCard === undefined) {\n      let newIdx = randNum();\n\n      if (!isCardInDeck(deck, newIdx) && !newCardIds.includes(newIdx)) {\n        newCardIds.push(newIdx);\n        newCard = cards[newIdx - 1];\n        newDeck[selectedCardIdx] = newCard;\n      }\n    }\n  });\n  deck.forEach((card) => {\n    card.selected = false;\n    card.set = null;\n  });\n  return newDeck;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}