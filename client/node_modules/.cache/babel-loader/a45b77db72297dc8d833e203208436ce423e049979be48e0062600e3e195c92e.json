{"ast":null,"code":"import _toConsumableArray from\"/Users/cd/Documents/Projects/set-game2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/cd/Documents/Projects/set-game2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useContext,useState,useEffect}from\"react\";import{initDeck,checkSet,updateDeck}from\"../utils/utils\";import{jsx as _jsx}from\"react/jsx-runtime\";var initialContext={deck:[],setDeck:function setDeck(){},score:0,setScore:function setScore(){}};var GameContext=/*#__PURE__*/createContext(initialContext);// Hook that returns the Context value\nexport var useGameDetails=function useGameDetails(){var contextValue=useContext(GameContext);if(!contextValue){throw new Error(\"useGameDetails must be called within GameContextProvider\");}return contextValue;};// Context provider that returns the context that wraps the children to give them access to the state\nexport var GameContextProvider=function GameContextProvider(_ref){var children=_ref.children;// ------- State -------\nvar _useState=useState(initDeck()),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),score=_useState4[0],setScore=_useState4[1];var value={deck:deck,setDeck:setDeck,score:score,setScore:setScore};// ------- Functions -------\nvar selectedCardsAreASet=function selectedCardsAreASet(selectedCards){selectedCards.forEach(function(card){card.set=true;});setScore(score+1);setTimeout(function(){setDeck(updateDeck(deck));},1000);};var selectedCardsNotASet=function selectedCardsNotASet(selectedCards){var newDeck=_toConsumableArray(deck);selectedCards.forEach(function(card){card.set=false;});setDeck(newDeck);};var resetSelectedCards=function resetSelectedCards(){return(// Reset selected cards and update score\nsetTimeout(function(){var newDeck=_toConsumableArray(deck);newDeck.forEach(function(card){card.selected=false;card.set=null;});setScore(score-1);setDeck(newDeck);},1000));};// ------- Effects -------\nuseEffect(function(){var selectedCards=deck.filter(function(card){return card.selected===true;});if(selectedCards.length===3){if(checkSet(selectedCards)){// Tell cards that they are a set\nselectedCardsAreASet(selectedCards);}else{// Tell cards that they are not a set\nselectedCardsNotASet(selectedCards);// Reset selected cards\nresetSelectedCards();}}},[deck]);return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","initDeck","checkSet","updateDeck","jsx","_jsx","initialContext","deck","setDeck","score","setScore","GameContext","useGameDetails","contextValue","Error","GameContextProvider","_ref","children","_useState","_useState2","_slicedToArray","_useState3","_useState4","value","selectedCardsAreASet","selectedCards","forEach","card","set","setTimeout","selectedCardsNotASet","newDeck","_toConsumableArray","resetSelectedCards","selected","filter","length","Provider"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { CardType } from \"../types/CardType\";\n\ninterface IGameContext {\n  deck: CardType[];\n  setDeck: (deck: CardType[]) => void;\n  score: number;\n  setScore: (score: number) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  // ------- State -------\n  const [deck, setDeck] = useState<CardType[]>(initDeck());\n  const [score, setScore] = useState<number>(0);\n\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore,\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = (selectedCards: CardType[]) => {\n    selectedCards.forEach((card) => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      setDeck(updateDeck(deck));\n    }, 1000);\n  };\n\n  const selectedCardsNotASet = (selectedCards: CardType[]) => {\n    let newDeck = [...deck];\n\n    selectedCards.forEach((card) => {\n      card.set = false;\n    });\n    setDeck(newDeck);\n  };\n\n  const resetSelectedCards = () =>\n    // Reset selected cards and update score\n    setTimeout(() => {\n      let newDeck = [...deck];\n      newDeck.forEach((card) => {\n        card.selected = false;\n        card.set = null;\n      });\n\n      setScore(score - 1);\n      setDeck(newDeck);\n    }, 1000);\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Tell cards that they are a set\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Tell cards that they are not a set\n        selectedCardsNotASet(selectedCards);\n\n        // Reset selected cards\n        resetSelectedCards();\n      }\n    }\n  }, [deck]);\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}