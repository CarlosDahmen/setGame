{"ast":null,"code":"import _toConsumableArray from\"/Users/cd/Documents/Projects/set-game2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/cd/Documents/Projects/set-game2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useContext,useState,useEffect}from\"react\";import{initDeck,checkSet,updateDeck}from\"../utils/utils\";import{jsx as _jsx}from\"react/jsx-runtime\";var initialContext={deck:[],setDeck:function setDeck(){},score:0,setScore:function setScore(){},highScores:[],setHighScores:function setHighScores(){}};var GameContext=/*#__PURE__*/createContext(initialContext);// Hook that returns the Context value\nexport var useGameDetails=function useGameDetails(){var contextValue=useContext(GameContext);if(!contextValue){throw new Error(\"useGameDetails must be called within GameContextProvider\");}return contextValue;};// Context provider that returns the context that wraps the children to give them access to the state\nexport var GameContextProvider=function GameContextProvider(_ref){var children=_ref.children;// ------- State -------\nvar _useState=useState(initDeck()),_useState2=_slicedToArray(_useState,2),deck=_useState2[0],setDeck=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),score=_useState4[0],setScore=_useState4[1];var _useState5=useState([{name:\"test\",score:0},{name:\"cd\",score:100}]),_useState6=_slicedToArray(_useState5,2),highScores=_useState6[0],setHighScores=_useState6[1];var value={deck:deck,setDeck:setDeck,score:score,setScore:setScore,highScores:highScores,setHighScores:setHighScores};// ------- Functions -------\nvar selectedCardsAreASet=function selectedCardsAreASet(selectedCards){selectedCards.forEach(function(card){card.set=true;});setScore(score+1);setTimeout(function(){var newDeck=updateDeck(deck);setDeck(newDeck);},1000);};var selectedCardsNotASet=function selectedCardsNotASet(selectedCards){setScore(score-1);selectedCards.forEach(function(card){card.set=false;});// Reset selected cards\nsetTimeout(function(){var newDeck=_toConsumableArray(deck);deck.forEach(function(card){card.selected=false;card.set=null;});setDeck(newDeck);},1000);};// const resetSelectedCards = (selectedCards: CardType[]) => {\n//   // Reset selected cards as not selected and not set\n//   setTimeout(() => {\n//     let newDeck = [...deck];\n//     deck.forEach((card) => {\n//       card.selected = false;\n//       card.set = null;\n//     });\n//     setDeck(newDeck);\n//   }, 1000);\n// };\n// ------- Effects -------\nuseEffect(function(){var selectedCards=deck.filter(function(card){return card.selected===true;});if(selectedCards.length===3){if(checkSet(selectedCards)){// Modify selectedCards property set to true\nselectedCardsAreASet(selectedCards);}else{// Modify selectedCards property set to false\nselectedCardsNotASet(selectedCards);}}},[deck]);//if current score is higer than the lowest high score, add it to the high scores\nuseEffect(function(){},[score]);return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","initDeck","checkSet","updateDeck","jsx","_jsx","initialContext","deck","setDeck","score","setScore","highScores","setHighScores","GameContext","useGameDetails","contextValue","Error","GameContextProvider","_ref","children","_useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","name","_useState6","value","selectedCardsAreASet","selectedCards","forEach","card","set","setTimeout","newDeck","selectedCardsNotASet","_toConsumableArray","selected","filter","length","Provider"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { CardType } from \"../types/CardType\";\nimport { ScoreType } from \"../types/ScoreType\";\ninterface IGameContext {\n  deck: CardType[];\n  setDeck: (deck: CardType[]) => void;\n  score: number;\n  setScore: (score: number) => void;\n  highScores: ScoreType[];\n  setHighScores: (highScore: ScoreType[]) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n  highScores: [],\n  setHighScores: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  // ------- State -------\n  const [deck, setDeck] = useState<CardType[]>(initDeck());\n  const [score, setScore] = useState<number>(0);\n  const [highScores, setHighScores] = useState<ScoreType[]>([\n    { name: \"test\", score: 0 },\n    { name: \"cd\", score: 100 },\n  ]);\n\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore,\n    highScores,\n    setHighScores,\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = (selectedCards: CardType[]) => {\n    selectedCards.forEach((card) => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      const newDeck = updateDeck(deck);\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  const selectedCardsNotASet = (selectedCards: CardType[]) => {\n    setScore(score - 1);\n\n    selectedCards.forEach((card) => {\n      card.set = false;\n    });\n    // Reset selected cards\n    setTimeout(() => {\n      let newDeck = [...deck];\n      deck.forEach((card) => {\n        card.selected = false;\n        card.set = null;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  // const resetSelectedCards = (selectedCards: CardType[]) => {\n  //   // Reset selected cards as not selected and not set\n  //   setTimeout(() => {\n  //     let newDeck = [...deck];\n  //     deck.forEach((card) => {\n  //       card.selected = false;\n  //       card.set = null;\n  //     });\n\n  //     setDeck(newDeck);\n  //   }, 1000);\n  // };\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Modify selectedCards property set to true\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Modify selectedCards property set to false\n        selectedCardsNotASet(selectedCards);\n      }\n    }\n  }, [deck]);\n\n  //if current score is higer than the lowest high score, add it to the high scores\n  useEffect(() => {}, [score]);\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}