{"ast":null,"code":"import { cards } from \"../cards\";\nconst randCard = () => {\n  const randIdx = Math.ceil(81 * Math.random());\n  return cards[randIdx];\n};\nexport const initDeck = () => {\n  let newDeck = [];\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map(number => cards[number]);\n};\nexport let deck = initDeck();\nexport const newCard = existingDeck => {\n  let newCard = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\nexport const checkSet = selectedCards => {\n  /* hash = {\n    1 => [one, red, peanut, solid]\n    2 => [two, red, peanut, solid]\n    3 => [three, red, peanut, solid]\n  }\n     hash.get(card)\n   */\n  console.log(\"CHECKED!\");\n  return true;\n};\n\n/**\n *\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck, selectedCards) => {\n  selectedCards.forEach(card => {\n    const idx = deck.indexOf(card);\n    let newCard = undefined;\n    while (newCard === undefined) {\n      let newCard = randCard();\n      if (!deck.includes(newNumber)) {\n        newCard = newNumber;\n        deck[idx] = newCard;\n      }\n    }\n  });\n  return deck;\n};","map":{"version":3,"names":["cards","randCard","randIdx","Math","ceil","random","initDeck","newDeck","length","newNum","randNum","includes","push","map","number","deck","newCard","existingDeck","checkSet","selectedCards","console","log","updateDeck","forEach","card","idx","indexOf","undefined","newNumber"],"sources":["/Users/cd/Documents/Projects/set-game2/src/utils/Deck.ts"],"sourcesContent":["import { cards } from \"../cards\";\nimport { Card } from \"../types/Card\";\n\nconst randCard = () => {\n  const randIdx = Math.ceil(81 * Math.random());\n  return cards[randIdx];\n};\n\nexport const initDeck = () => {\n  let newDeck: number[] = [];\n\n  while (newDeck.length < 12) {\n    const newNum = randNum();\n    if (!newDeck.includes(newNum)) {\n      newDeck.push(newNum);\n    }\n  }\n  return newDeck.map((number) => cards[number]);\n};\n\nexport let deck = initDeck();\n\nexport const newCard = (existingDeck: number[]) => {\n  let newCard: number = 0;\n  while (newCard !== 0) {\n    const newNum = randNum();\n    if (!existingDeck.includes(newNum)) {\n      newCard = newNum;\n    }\n  }\n  return newCard;\n};\n\nexport const checkSet = (selectedCards: Card[]) => {\n  /* hash = {\n    1 => [one, red, peanut, solid]\n    2 => [two, red, peanut, solid]\n    3 => [three, red, peanut, solid]\n  }\n\n    hash.get(card)\n\n  */\n  console.log(\"CHECKED!\");\n  return true;\n};\n\n/**\n *\n * If the 3 selected cards are a set, updateDeck removes those cards\n * and adds 3 new random cards not currently in the deck\n */\nexport const updateDeck = (deck: Card[], selectedCards: Card[]) => {\n  selectedCards.forEach((card) => {\n    const idx = deck.indexOf(card);\n\n    let newCard = undefined;\n\n    while (newCard === undefined) {\n      let newCard = randCard();\n\n      if (!deck.includes(newNumber)) {\n        newCard = newNumber;\n        deck[idx] = newCard;\n      }\n    }\n  });\n  return deck;\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,UAAU;AAGhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAMC,OAAO,GAAGC,IAAI,CAACC,IAAI,CAAC,EAAE,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;EAC7C,OAAOL,KAAK,CAACE,OAAO,CAAC;AACvB,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAGA,CAAA,KAAM;EAC5B,IAAIC,OAAiB,GAAG,EAAE;EAE1B,OAAOA,OAAO,CAACC,MAAM,GAAG,EAAE,EAAE;IAC1B,MAAMC,MAAM,GAAGC,OAAO,CAAC,CAAC;IACxB,IAAI,CAACH,OAAO,CAACI,QAAQ,CAACF,MAAM,CAAC,EAAE;MAC7BF,OAAO,CAACK,IAAI,CAACH,MAAM,CAAC;IACtB;EACF;EACA,OAAOF,OAAO,CAACM,GAAG,CAAEC,MAAM,IAAKd,KAAK,CAACc,MAAM,CAAC,CAAC;AAC/C,CAAC;AAED,OAAO,IAAIC,IAAI,GAAGT,QAAQ,CAAC,CAAC;AAE5B,OAAO,MAAMU,OAAO,GAAIC,YAAsB,IAAK;EACjD,IAAID,OAAe,GAAG,CAAC;EACvB,OAAOA,OAAO,KAAK,CAAC,EAAE;IACpB,MAAMP,MAAM,GAAGC,OAAO,CAAC,CAAC;IACxB,IAAI,CAACO,YAAY,CAACN,QAAQ,CAACF,MAAM,CAAC,EAAE;MAClCO,OAAO,GAAGP,MAAM;IAClB;EACF;EACA,OAAOO,OAAO;AAChB,CAAC;AAED,OAAO,MAAME,QAAQ,GAAIC,aAAqB,IAAK;EACjD;AACF;AACA;AACA;AACA;AACA;AACA;EAGEC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACP,IAAY,EAAEI,aAAqB,KAAK;EACjEA,aAAa,CAACI,OAAO,CAAEC,IAAI,IAAK;IAC9B,MAAMC,GAAG,GAAGV,IAAI,CAACW,OAAO,CAACF,IAAI,CAAC;IAE9B,IAAIR,OAAO,GAAGW,SAAS;IAEvB,OAAOX,OAAO,KAAKW,SAAS,EAAE;MAC5B,IAAIX,OAAO,GAAGf,QAAQ,CAAC,CAAC;MAExB,IAAI,CAACc,IAAI,CAACJ,QAAQ,CAACiB,SAAS,CAAC,EAAE;QAC7BZ,OAAO,GAAGY,SAAS;QACnBb,IAAI,CAACU,GAAG,CAAC,GAAGT,OAAO;MACrB;IACF;EACF,CAAC,CAAC;EACF,OAAOD,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}