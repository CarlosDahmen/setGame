{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/components/Rules.tsx\";\nimport { createPortal } from \"react-dom\";\nimport \"./Rules.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rules = _ref => {\n  let {\n    closeRulesModal\n  } = _ref;\n  const exampleUrl2 = require(`../../public/images/examples/example2.png`);\n  const exampleUrl3 = require(`../../public/images/examples/example3.png`);\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rules\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rules and How to Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"The purpose of the Game is to identify SETs of 3 from the 12 cards displayed in the board.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"What is a Set?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"A set consists of three cards in which each feature (shape, color, number and shading) are all the same, or all different.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Examples of Sets:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: require(\"../../public/images/examples/example1.png\"),\n        alt: \"example1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: exampleUrl2,\n        alt: \"example2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: exampleUrl3,\n        alt: \"example3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"How to Play:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Once you think you\\u2019ve found a set, click on the cards. If it is a set, the selected cards will turn green, a +1 will be added to your score, and the three cards will be replaced by new cards. If it is not a set, the cards will turn red and your score will decrease be 1.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => closeRulesModal(),\n      children: \"CLOSE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), document.body);\n};\n_c = Rules;\nexport default Rules;\nvar _c;\n$RefreshReg$(_c, \"Rules\");","map":{"version":3,"names":["createPortal","jsxDEV","_jsxDEV","Rules","_ref","closeRulesModal","exampleUrl2","require","exampleUrl3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","document","body","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/components/Rules.tsx"],"sourcesContent":["import { createPortal } from \"react-dom\";\nimport \"./Rules.css\";\n\nconst Rules = ({ closeRulesModal }: any) => {\n  const exampleUrl2 = require(`../../public/images/examples/example2.png`);\n  const exampleUrl3 = require(`../../public/images/examples/example3.png`);\n\n  return createPortal(\n    <div className=\"rules\">\n      <h1>Rules and How to Play</h1>\n      <h2>\n        The purpose of the Game is to identify SETs of 3 from the 12 cards\n        displayed in the board.\n      </h2>\n\n      <h2>What is a Set?</h2>\n      <h3>\n        A set consists of three cards in which each feature (shape, color,\n        number and shading) are all the same, or all different.\n      </h3>\n\n      <h2>Examples of Sets:</h2>\n      <div className=\"images-container\">\n        <img\n          src={require(\"../../public/images/examples/example1.png\")}\n          alt=\"example1\"\n        ></img>\n        <img src={exampleUrl2} alt=\"example2\"></img>\n        <img src={exampleUrl3} alt=\"example3\"></img>\n      </div>\n      <h2>How to Play:</h2>\n      <h3>\n        Once you think youâ€™ve found a set, click on the cards. If it is a set,\n        the selected cards will turn green, a +1 will be added to your score,\n        and the three cards will be replaced by new cards. If it is not a set,\n        the cards will turn red and your score will decrease be 1.\n      </h3>\n      <button onClick={() => closeRulesModal()}>CLOSE</button>\n    </div>,\n    document.body\n  );\n};\n\nexport default Rules;\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,WAAW;AACxC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAGC,IAAA,IAA8B;EAAA,IAA7B;IAAEC;EAAqB,CAAC,GAAAD,IAAA;EACrC,MAAME,WAAW,GAAGC,OAAO,CAAE,2CAA0C,CAAC;EACxE,MAAMC,WAAW,GAAGD,OAAO,CAAE,2CAA0C,CAAC;EAExE,oBAAOP,YAAY,eACjBE,OAAA;IAAKO,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACpBR,OAAA;MAAAQ,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BZ,OAAA;MAAAQ,QAAA,EAAI;IAGJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAELZ,OAAA;MAAAQ,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBZ,OAAA;MAAAQ,QAAA,EAAI;IAGJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAELZ,OAAA;MAAAQ,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BZ,OAAA;MAAKO,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BR,OAAA;QACEa,GAAG,EAAER,OAAO,CAAC,2CAA2C,CAAE;QAC1DS,GAAG,EAAC;MAAU;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACPZ,OAAA;QAAKa,GAAG,EAAET,WAAY;QAACU,GAAG,EAAC;MAAU;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC5CZ,OAAA;QAAKa,GAAG,EAAEP,WAAY;QAACQ,GAAG,EAAC;MAAU;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACNZ,OAAA;MAAAQ,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBZ,OAAA;MAAAQ,QAAA,EAAI;IAKJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLZ,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMZ,eAAe,CAAC,CAAE;MAAAK,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC,EACNI,QAAQ,CAACC,IACX,CAAC;AACH,CAAC;AAACC,EAAA,GAtCIjB,KAAK;AAwCX,eAAeA,KAAK;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}