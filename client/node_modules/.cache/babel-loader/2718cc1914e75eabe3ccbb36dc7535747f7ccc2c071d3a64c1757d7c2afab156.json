{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  deck: [],\n  setDeck: () => {}\n};\nconst GameContext = /*#__PURE__*/createContext(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  _s();\n  const contextValue = useContext(GameContext);\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\n_s(useGameDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const GameContextProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [deck, setDeck] = useState(initDeck());\n  const value = {\n    deck,\n    setDeck\n  };\n  useEffect(() => {\n    const selectedCards = deck.filter(card => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        let newDeck = [...deck];\n        newDeck.forEach(card => card.set = true);\n        setDeck(newDeck);\n        setTimeout(() => {\n          setDeck(updateDeck(deck));\n        }, 1000);\n      } else {\n        // There's not a set in the selected cards\n        // Set border to red and display for 1 sec\n        // Then remove border\n        /**\n         * Find the 3 selected cards in the deck and set a property that\n         * indicates that they are not a SET so then we can render the appropiate class\n         */\n        console.log(\"In Here!!\");\n        console.log(selectedCards);\n        // setDeck(markNotSetCards(deck));\n      }\n      // resetSelectedCards(deck);\n    }\n  }, [deck]);\n  const resetSelectedCards = deck => {\n    setTimeout(() => {\n      let newDeck = [...deck];\n      newDeck.forEach(card => {\n        card.selected = false;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameContextProvider, \"ZrYTnNeyeufn6vaWiuOe9lfl9Cw=\");\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","initDeck","checkSet","updateDeck","jsxDEV","_jsxDEV","initialContext","deck","setDeck","GameContext","useGameDetails","_s","contextValue","Error","GameContextProvider","_ref","_s2","children","value","selectedCards","filter","card","selected","length","newDeck","forEach","set","setTimeout","console","log","resetSelectedCards","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { Card } from \"../types/Card\";\n\ninterface IGameContext {\n  deck: Card[];\n  setDeck: (deck: Card[]) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  const [deck, setDeck] = useState<Card[]>(initDeck());\n\n  const value = {\n    deck,\n    setDeck,\n  };\n\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        let newDeck = [...deck];\n        newDeck.forEach((card) => (card.set = true));\n        setDeck(newDeck);\n\n        setTimeout(() => {\n          setDeck(updateDeck(deck));\n        }, 1000);\n      } else {\n        // There's not a set in the selected cards\n        // Set border to red and display for 1 sec\n        // Then remove border\n        /**\n         * Find the 3 selected cards in the deck and set a property that\n         * indicates that they are not a SET so then we can render the appropiate class\n         */\n        console.log(\"In Here!!\");\n        console.log(selectedCards);\n        // setDeck(markNotSetCards(deck));\n      }\n      // resetSelectedCards(deck);\n    }\n  }, [deck]);\n\n  const resetSelectedCards = (deck: Card[]) => {\n    setTimeout(() => {\n      let newDeck = [...deck];\n      newDeck.forEach((card) => {\n        card.selected = false;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACtE,SAASC,QAAQ,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQhE,MAAMC,cAAc,GAAG;EACrBC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAEA,CAAA,KAAM,CAAC;AAClB,CAAC;AAED,MAAMC,WAAW,gBAAGZ,aAAa,CAAeS,cAAc,CAAC;;AAE/D;AACA,OAAO,MAAMI,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,YAAY,GAAGd,UAAU,CAACW,WAAW,CAAC;EAE5C,IAAI,CAACG,YAAY,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EACA,OAAOD,YAAY;AACrB,CAAC;;AAED;AAAAD,EAAA,CATaD,cAAc;AAU3B,OAAO,MAAMI,mBAAmB,GAAGC,IAAA,IAAuB;EAAAC,GAAA;EAAA,IAAtB;IAAEC;EAAc,CAAC,GAAAF,IAAA;EACnD,MAAM,CAACR,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAASE,QAAQ,CAAC,CAAC,CAAC;EAEpD,MAAMiB,KAAK,GAAG;IACZX,IAAI;IACJC;EACF,CAAC;EAEDR,SAAS,CAAC,MAAM;IACd,MAAMmB,aAAa,GAAGZ,IAAI,CAACa,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,KAAK,IAAI,CAAC;IACnE,IAAIH,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;MAC9B,IAAIrB,QAAQ,CAACiB,aAAa,CAAC,EAAE;QAC3B,IAAIK,OAAO,GAAG,CAAC,GAAGjB,IAAI,CAAC;QACvBiB,OAAO,CAACC,OAAO,CAAEJ,IAAI,IAAMA,IAAI,CAACK,GAAG,GAAG,IAAK,CAAC;QAC5ClB,OAAO,CAACgB,OAAO,CAAC;QAEhBG,UAAU,CAAC,MAAM;UACfnB,OAAO,CAACL,UAAU,CAACI,IAAI,CAAC,CAAC;QAC3B,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM;QACL;QACA;QACA;QACA;AACR;AACA;AACA;QACQqB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBD,OAAO,CAACC,GAAG,CAACV,aAAa,CAAC;QAC1B;MACF;MACA;IACF;EACF,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EAEV,MAAMuB,kBAAkB,GAAIvB,IAAY,IAAK;IAC3CoB,UAAU,CAAC,MAAM;MACf,IAAIH,OAAO,GAAG,CAAC,GAAGjB,IAAI,CAAC;MACvBiB,OAAO,CAACC,OAAO,CAAEJ,IAAI,IAAK;QACxBA,IAAI,CAACC,QAAQ,GAAG,KAAK;MACvB,CAAC,CAAC;MACFd,OAAO,CAACgB,OAAO,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBAAOnB,OAAA,CAACI,WAAW,CAACsB,QAAQ;IAACb,KAAK,EAAEA,KAAM;IAAAD,QAAA,EAAEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;AAACnB,GAAA,CA9CWF,mBAAmB;AAAAsB,EAAA,GAAnBtB,mBAAmB;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}