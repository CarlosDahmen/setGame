{"ast":null,"code":"var _jsxFileName = \"/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n  highScores: [],\n  setHighScores: () => {}\n};\nconst GameContext = /*#__PURE__*/createContext(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  _s();\n  const contextValue = useContext(GameContext);\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\n_s(useGameDetails, \"LIxFXvZbUdXE/TWxKLLXMjM3Mig=\");\nexport const GameContextProvider = _ref => {\n  _s2();\n  let {\n    children\n  } = _ref;\n  // ------- State -------\n  const [deck, setDeck] = useState(initDeck());\n  const [score, setScore] = useState(0);\n  const [highScores, setHighScores] = useState([{\n    name: \"test\",\n    score: 0\n  }, {\n    name: \"cd\",\n    score: 100\n  }]);\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = selectedCards => {\n    selectedCards.forEach(card => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      const newDeck = updateDeck(deck);\n      setDeck(newDeck);\n    }, 1000);\n  };\n  const selectedCardsNotASet = selectedCards => {\n    setScore(score - 1);\n    selectedCards.forEach(card => {\n      card.set = false;\n    });\n    // Reset selected cards\n    setTimeout(() => {\n      let newDeck = [...deck];\n      deck.forEach(card => {\n        card.selected = false;\n        card.set = null;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  // const resetSelectedCards = (selectedCards: CardType[]) => {\n  //   // Reset selected cards as not selected and not set\n  //   setTimeout(() => {\n  //     let newDeck = [...deck];\n  //     deck.forEach((card) => {\n  //       card.selected = false;\n  //       card.set = null;\n  //     });\n\n  //     setDeck(newDeck);\n  //   }, 1000);\n  // };\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter(card => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Modify selectedCards property set to true\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Modify selectedCards property set to false\n        selectedCardsNotASet(selectedCards);\n      }\n    }\n  }, [deck]);\n\n  //if current score is higer than the lowest high score, add it to the high scores\n  useEffect(() => {}, [score]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 10\n  }, this);\n};\n_s2(GameContextProvider, \"cEkJjC770LxLjtMrnxnzBriDKJw=\");\n_c = GameContextProvider;\nvar _c;\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","initDeck","checkSet","updateDeck","jsxDEV","_jsxDEV","initialContext","deck","setDeck","score","setScore","highScores","setHighScores","GameContext","useGameDetails","_s","contextValue","Error","GameContextProvider","_ref","_s2","children","name","value","selectedCardsAreASet","selectedCards","forEach","card","set","setTimeout","newDeck","selectedCardsNotASet","selected","filter","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cd/Documents/Projects/set-game2/src/context/GameLogic.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport { initDeck, checkSet, updateDeck } from \"../utils/utils\";\nimport { CardType } from \"../types/CardType\";\nimport { ScoreType } from \"../types/ScoreType\";\ninterface IGameContext {\n  deck: CardType[];\n  setDeck: (deck: CardType[]) => void;\n  score: number;\n  setScore: (score: number) => void;\n  highScores: ScoreType[];\n  setHighScores: (highScore: ScoreType[]) => void;\n}\n\nconst initialContext = {\n  deck: [],\n  setDeck: () => {},\n  score: 0,\n  setScore: () => {},\n  highScores: [],\n  setHighScores: () => {},\n};\n\nconst GameContext = createContext<IGameContext>(initialContext);\n\n// Hook that returns the Context value\nexport const useGameDetails = () => {\n  const contextValue = useContext(GameContext);\n\n  if (!contextValue) {\n    throw new Error(\"useGameDetails must be called within GameContextProvider\");\n  }\n  return contextValue;\n};\n\n// Context provider that returns the context that wraps the children to give them access to the state\nexport const GameContextProvider = ({ children }: any) => {\n  // ------- State -------\n  const [deck, setDeck] = useState<CardType[]>(initDeck());\n  const [score, setScore] = useState<number>(0);\n  const [highScores, setHighScores] = useState<ScoreType[]>([\n    { name: \"test\", score: 0 },\n    { name: \"cd\", score: 100 },\n  ]);\n\n  const value = {\n    deck,\n    setDeck,\n    score,\n    setScore,\n  };\n\n  // ------- Functions -------\n  const selectedCardsAreASet = (selectedCards: CardType[]) => {\n    selectedCards.forEach((card) => {\n      card.set = true;\n    });\n    setScore(score + 1);\n    setTimeout(() => {\n      const newDeck = updateDeck(deck);\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  const selectedCardsNotASet = (selectedCards: CardType[]) => {\n    setScore(score - 1);\n\n    selectedCards.forEach((card) => {\n      card.set = false;\n    });\n    // Reset selected cards\n    setTimeout(() => {\n      let newDeck = [...deck];\n      deck.forEach((card) => {\n        card.selected = false;\n        card.set = null;\n      });\n      setDeck(newDeck);\n    }, 1000);\n  };\n\n  // const resetSelectedCards = (selectedCards: CardType[]) => {\n  //   // Reset selected cards as not selected and not set\n  //   setTimeout(() => {\n  //     let newDeck = [...deck];\n  //     deck.forEach((card) => {\n  //       card.selected = false;\n  //       card.set = null;\n  //     });\n\n  //     setDeck(newDeck);\n  //   }, 1000);\n  // };\n\n  // ------- Effects -------\n  useEffect(() => {\n    const selectedCards = deck.filter((card) => card.selected === true);\n    if (selectedCards.length === 3) {\n      if (checkSet(selectedCards)) {\n        // Modify selectedCards property set to true\n        selectedCardsAreASet(selectedCards);\n      } else {\n        // Modify selectedCards property set to false\n        selectedCardsNotASet(selectedCards);\n      }\n    }\n  }, [deck]);\n\n  //if current score is higer than the lowest high score, add it to the high scores\n  useEffect(() => {}, [score]);\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}